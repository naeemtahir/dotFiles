# Add these lines to $HOME/.bashrc  or $HOME/.zshrc
#
#if [ -f $HOME/.aliases ]; then
#   . $HOME/.aliases
#fi

# Enhance common commands
if [[ "$OSTYPE" == "linux"* ]]; then
    alias ls='ls --color=auto'           # Colorize the output
fi
alias l='ls -CF'                        # List files and directories
alias la='ls -CAF'                      # List files and directories, including hidden
alias lh='ls -ld .?*'                   # List only hidden files and directories
alias lf='ls -p | grep -v /'            # List files
alias lfa='ls -a -p | grep -v /'        # List files, including hidden
alias ld='ls -p | grep /'               # List directories
alias lda='ls -a -p | grep /'           # List directories, including hidden
alias ll='ls -alF'                      # List in long format
alias lli='ls -AFli'                    # List with inode numbers
alias llh='ls -AFlh'                    # List with humane readable size
alias llt='ls -AFlt'                    # List by descending modification time
alias lltr='ls -AFltr'                  # List by ascending modification time

if [[ "$OSTYPE" == "linux"* ]]; then
   alias lls='ls -AFlh --size -1 -S'    # List by descending size
   alias llsr='ls -AFlhr --size -1 -S'  # List by ascending size
   alias llx='ls -AFlX'                 # List by descending extension
   alias llxr='ls -AFlXr'               # List by ascendng extension
elif [[ "$OSTYPE" == "darwin"* ]]; then
   alias lls='ls -alFS'                 # List by descending size
   alias llsr='ls -alrFS'               # List by ascending size
fi
alias cp='cp -iv'                       # Run 'cp' in interactive mode and explain what is being done
alias df='df -h'                        # Display disk usage on all volumes
alias mkdir='mkdir -p'                  # Override 'mkdir' to make parent directories as needed
alias mv='mv -iv'                       # Run 'mv' in interactive mode and explain what is being done
alias wget='wget -c'                    # Continue getting a partially-downloaded file (e.g., started by a previous instance of wget)

# Shell
alias showfunc='function _showfunc() { if [ "$#" -eq 1 ]; then declare -f "$1"; else echo "Usage: showfunc <function_name>"; fi };_showfunc'   # Display definition of given bash function

# Quick navigation
alias b='cd -'
alias ..='cd ..'
alias ...='cd ../..'
alias .1='cd ..'
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias .6='cd ../../../../../..'
alias .7='cd ../../../../../../..'
alias .8='cd ../../../../../../../..'
alias .9='cd ../../../../../../../../..'
alias .10='cd ../../../../../../../../../..'

# Quick Search
alias ga='alias | grep -E'              # Search alias
alias gh='history | grep -E'            # Search command history
alias gps='ps -ef | grep -E'            # Search process
alias qf='find . -iname'                # Find file(s)/folder(s) matching name pattern
alias qfc='find . -name'                # Find file(s)/folder(s) matching name pattern, case-sensitive
alias qg='grep --color=auto -rin . -e'  # Find files containing text
alias qgf='function _qgf() { if [ "$#" -ge 2 ]; then grep --color=auto -n "$1" "${@:2}"; else echo "Usage: qgf <regex> <file(s)>"; fi };_qgf' # Search in given file(s)
alias qgx='function _qgx() { if [ "$#" -eq 2 ]; then grep --color=auto -rin --include=\*.$1 . -e "$2"; else echo "Usage: qgx <file_type> <regex>"; fi };_qgx' # Search in given file type
alias qgc='grep --color=auto -rn . -e'  # Search case-sensitive
alias qgfc='function _qgfc() { if [ "$#" -ge 2 ]; then grep --color=auto -n "$1" "${@:2}"; else echo "Usage: qgfc <regex> <file(s)>"; fi };_qgfc' # Search in given file(s) (case sensitive)
alias qgxc='function _qgxc() { if [ "$#" -eq 2 ]; then grep --color=auto -rn --include=\*.$1 . -e "$2"; else echo "Usage: qgxc <file_type> <regex>"; fi };_qgxc' # Search in given file type (case sensitive)

# Shell shortcuts
alias c='clear'
alias e='exit'

# System & Diagnostics Info
if [[ "$OSTYPE" == "linux"* ]]; then
    alias archinfo='dpkg --print-architecture'                      # Display CPU Architecture
    alias cpuinfo='lscpu'                                           # Display CPU info
    alias deviceinfo='lspci'                                        # Display devices
    alias diskspace='function _diskspace() { if [ "$#" -eq 1 ]; then df -h "$1"; else echo "Usage: diskspace <mount point, e.g., / or ~/mnt/k>"; fi };_diskspace'   # Display disk usage
    alias distinfo='lsb_release -sd'                                # Display distribution info
    alias meminfo='free -m -l -t'                                   # Display memory usage
    alias osinfo='lsb_release -sd'                                  # Display OS info
    alias usbinfo='lsusb'                                           # Display USB devices
    alias activeports='netstat -tulanp'                             # List active ports
    alias myip='ip addr | sed -En "s/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p"; curl http://ipecho.net/plain; echo;'             # Display IPs
    alias networkapps='sudo lsof -P -i -n | cut -f 1 -d " " | uniq | tail -n +2 | sort'  # List which applications are connecting to the network
    alias openports='netstat -tulanp | grep -i listen'              # List open ports
    alias topcpu='ps auxf | sort -nr -k 3'                          # List top processes by CPU usage
    alias top10cpu='ps auxf | sort -nr -k 3 | head -10'             # List top 10 processes by CPU usage
    alias topmem='ps auxf | sort -nr -k 4'                          # List top processes by memory usage
    alias top10mem='ps auxf | sort -nr -k 4 | head -10'             # List top 10 processes by memory usage
    alias top10dir='du -a . | sort -n -r | head -n 10'              # List top 10 directories by size
    alias top10files='find -type f -exec du -Sh {} + | sort -rh | head -n 10'     # List top 10 files by size
    alias wifichannels='nmcli -f "CHAN,BARS,SIGNAL,SSID,SECURITY" d wifi | sort -n'  # List wifi channels of networks in range
    alias wifichannels_mine='nmcli -f "CHAN,BARS,SIGNAL,SSID,SECURITY" d wifi | sort -r -n -k3 | grep "iot\|ari\|sag\|lib\|cen\|bai"'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    alias archinfo='uname -a'
    alias cpuinfo='sysctl -n machdep.cpu.brand_string'              # Display CPU info
    alias deviceinfo='ioreg -p IOUSB'                               # Display devices
    alias diskspace='function _diskspace() { if [ "$#" -eq 1 ]; then df -h "$1"; else echo "Usage: diskspace <mount point, e.g., / or ~/mnt/k>"; fi };_diskspace'   # Display disk usage
    alias distinfo='uname -a'                                       # Display distribution info
    alias osinfo='uname -a'                                         # Display OS info
    alias usbinfo='ioreg -p IOUSB'                                  # Display USB devices
    alias activeports='netstat -tla'                                # List active ports
    alias myip='ifconfig | sed -En "s/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p"; curl http://ipecho.net/plain; echo'              # Display IPs
    alias networkapps='lsof -P -i -n | cut -f 1 -d " " | uniq | tail -n +2 | sort'  # List which applications are connecting to the network
    alias openports='netstat -tla | grep -i listen'                 # List open ports
    alias topcpu='ps aux | sort -nr -k 3'                           # List top processes by CPU usage
    alias top10cpu='ps aux | sort -nr -k 3 | head -10'              # List top 10 processes by CPU usage
    alias topmem='ps aux | sort -nr -k 4'                           # List top processes by memory usage
    alias top10mem='ps aux | sort -nr -k 4 | head -10'              # List top 10 processes by memory usage
    alias top10dir='du -a . | sort -n -r | head -n 10'              # List top 10 directories by size
    alias top10files='find -type f -exec du -Sh {} + | sort -rh | head -n 10'   # List top 10 files by size
fi

# Utilities
if [[ "$OSTYPE" == "linux"* ]]; then
    alias b64='function _b64() { if [ "$#" -eq 1 ]; then echo "$1" | base64 -w 0; else echo "Usage: b64 <str>"; fi };_b64'
    alias b64url='function _b64url() { if [ "$#" -eq 1 ]; then echo "$1" | base64 -w 0 | sed "s/\//_/g;s/\+/\-/g;s/=/%3D/g"; else echo "Usage: b64url <str>"; fi };_b64url'
    alias b64d='function _b64d() { if [ "$#" -eq 1 ]; then echo "$1" | base64 -d -i; else echo "Usage: b64d <str>"; fi };_b64d'
    alias b64urld='function _b64urld() { if [ "$#" -eq 1 ]; then echo "$1" | sed "s/_/\//g;s/\-/\+/g;s/%3D/=/g" | base64 -d -i; else echo "Usage: b64urld <str>"; fi };_b64urld'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    alias b64='function _b64() { if [ "$#" -eq 1 ]; then echo "$1" | base64; else echo "Usage: b64 <str>"; fi };_b64'
    alias b64url='function _b64url() { if [ "$#" -eq 1 ]; then echo "$1" | base64 | sed "s/\//_/g;s/\+/\-/g;s/=/%3D/g"; else echo "Usage: b64url <str>"; fi };_b64url'
    alias b64d='function _b64d() { if [ "$#" -eq 1 ]; then echo "$1" | base64 -D; else echo "Usage: b64d <str>"; fi };_b64d'
    alias b64urld='function _b64urld() { if [ "$#" -eq 1 ]; then echo "$1" | sed "s/_/\//g;s/\-/\+/g;s/%3D/=/g" | base64 -D; else echo "Usage: b64urld <str>"; fi };_b64urld'
fi
alias calc='function _calc() { if [ "$#" -eq 1 ]; then echo "$1" | bc; else echo "Usage: calc \"expression\""; fi };_calc'
alias countf='find . -maxdepth 1 -type f | wc -l'               # Count files in current dir
alias countfn='find . -type f | wc -l'                          # Count files in current dir and its subdirectories
alias countd='find . -maxdepth 1 -type d | wc -l'               # Count subdirectories in current dir
alias countdn='find . -type d | wc -l'                          # Count subdirectories in current dir and its subdirectories
alias dis='display -resize x1000'                               # Requires imagemagick
alias empty='cat /dev/null >'
alias genpasswd="strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo"
alias ipof='dig +short'
alias iplocation='geoiplookup'                                  # Requires geoip-bin
alias now='date +"%d-%m-%Y %T"'
alias ts2local='python2 -c "import sys, time; print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(float(sys.argv[1])/1000))"'
alias urlencode='python2 -c "import sys, urllib; print urllib.quote_plus(sys.argv[1])"'
alias urldecode='python2 -c "import sys, urllib; print urllib.unquote_plus(sys.argv[1])"'
alias urldecode2='python2 -c "import sys, urllib; s=urllib.unquote_plus(sys.argv[1]); print urllib.unquote_plus(s)"'
alias vcmount='veracrypt -t --mount'
alias vcunmount='veracrypt -t --dismount'
if [[ "$OSTYPE" == "linux"* ]]; then
    alias pbcopy='xsel --clipboard --input'                         # Requires xsel
    alias pbpaste='xsel --clipboard --output'
fi

# Pretty Print JSON/XML
alias jsonf='python2 -mjson.tool'
alias jsonfb='pbpaste | python2 -mjson.tool'
alias xmlf='xmllint --format -'                                 # Requires libxml2-utils
alias xmlfb='pbpaste | xmllint --format -'

# Image/Document Format conversion
alias 2ico='function _2ico() { if [ "$#" -eq 1 ]; then convert "$1" -define icon:auto-resize=128,64,48,32,16 "$1".ico; else echo "Usage: 2ico <image file>"; fi };_2ico' # Requires ImageMagick
alias 2jpg='function _2jpg() { if [ "$#" -eq 1 ]; then convert -density 300 "$1" -quality 100 "$1".jpg; else echo "Usage: 2jpg <image/document file; pdf/doc/docx etc.>"; fi };_2jpg' # Requires ImageMagick
alias 2png='function _2png() { if [ "$#" -eq 1 ]; then convert -density 300 "$1" -quality 100 -alpha off "$1".png; else echo "Usage: 2png <image/document file; pdf/doc/docx etc.>"; fi };_2png' # Requires ImageMagick
alias img2pdf='function _img2pdf() { if [ "$#" -eq 1 ]; then convert -density 300 "$1" -quality 100 "$1".pdf; else echo "Usage: img2pdf <image>"; fi };_img2pdf' # Requires ImageMagick

alias pdf2html='pdftohtml'                                                  # Requires poppler-utils
alias pdf2txt='pdftotext'                                                   # Requires poppler-utils
alias pdfsplit='function _pdfsplit() { if [ "$#" -eq 2 ]; then qpdf --split-pages "$1" "$2"; else echo "Usage: pdfsplit <input.pdf> <output.pdf>"; fi };_pdfsplit' # Requires qpdf
alias pdfjoin='function _pdfjoin() { if [ "$#" -eq 2 ]; then qpdf --empty "$2" --pages "$1"-*.pdf --; else echo "Usage: pdfjoin <input.pdf, e.g., splitname without number> <output.pdf>, OR USE MORE SOPHISTICATED 'pdfunite' UTILITY"; fi };_pdfjoin' # Requires qpdf

alias docx2pdf='function _docx2pdf() { if [ "$#" -eq 1 ]; then pandoc "$1" -f docx -s -o "$1".pdf; else echo "Usage: docx2pdf <docx>"; fi };_docx2pdf' # Requires pandoc
alias docx2odt='function _docx2odt() { if [ "$#" -eq 1 ]; then pandoc "$1" -f docx -t odt -s -o "$1".odt; else echo "Usage: docx2odt <docx>"; fi };_docx2odt' # Requires pandoc
alias docx2html='function _docx2html() { if [ "$#" -eq 1 ]; then pandoc "$1" -f docx -t html -s -o "$1".html; else echo "Usage: docx2html <docx>"; fi };_docx2html' # Requires pandoc
alias docx2md='function _docx2md() { if [ "$#" -eq 1 ]; then pandoc "$1" -f docx -t markdown -s -o "$1".md; else echo "Usage: docx2md <docx>"; fi };_docx2md' # Requires pandoc
alias docx2epub='function _docx2epub() { if [ "$#" -eq 1 ]; then pandoc "$1" -f docx -t epub -s -o "$1".epub; else echo "Usage: docx2epub <docx>"; fi };_docx2epub' # Requires pandoc

# No need for 'odt2xxx' aliases, they already exist as commands
#alias odt2docx=
#alias odt2pdf=
#alias odt2html=
#alias odt2md=
#alias doc2epub=

alias md2html='function _md2html() { if [ "$#" -eq 1 ]; then pandoc "$1" -f markdown -t html -s -o "$1".html; else echo "Usage: md2html <markdown file>"; fi };_md2html' # Requires pandoc
alias md2pdf='function _md2pdf() { if [ "$#" -eq 1 ]; then pandoc "$1" -f markdown -s -o "$1".pdf; else echo "Usage: md2pdf <markdown file>"; fi };_md2pdf' # Requires pandoc
alias md2docx='function _md2docx() { if [ "$#" -eq 1 ]; then pandoc "$1" -f markdown -t docx -s -o "$1".docx; else echo "Usage: md2docx <markdown file>"; fi };_md2docx' # Requires pandoc
alias md2odt='function _md2odt() { if [ "$#" -eq 1 ]; then pandoc "$1" -f markdown -t odt -s -o "$1".odt; else echo "Usage: md2odt <markdown file>"; fi };_md2odt' # Requires pandoc

# Photo Management
alias display_all='find . -maxdepth 1 -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.bmp" \) -exec display "{}" \;'
alias display_all_fit='find . -maxdepth 1 -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.bmp" \) -exec display -resize 1024x1024 "{}" \;'
alias display_fit='display -resize 1024x1024'
alias photoframe='function _photoframe(){ if [ "$#" -eq 1 ]; then photocopy.sh $1 _frame -y; else echo "Usage: photoframe <output dir>"; fi };_photoframe'
alias photoprint='function _photoprint(){ if [ "$#" -eq 1 ]; then photocopy.sh $1 _print -n; else echo "Usage: photoprint <output dir>"; fi };_photoprint'
alias random_image='function _random_image(){ if [ "$#" -eq 2 ]; then convert -size "$1" plasma:fractal $2; else echo "Usage: random_image <size, e.g., 1024x768> <image file>"; fi };_random_image'

# Audio/Video Management
alias vid2mp3='function _vid2mp3() { if [ "$#" -eq 2 ]; then ffmpeg -i "$1" -acodec libmp3lame -ab "$2" "$1.mp3"; else echo "Usage: vid2mp3 <audio-file> <bitrate, 64k/128k/256k etc.>"; fi };_vid2mp3'   # Requires ffmpeg
alias vid2mp4='function _vid2mp4() { if [ "$#" -eq 1 ]; then ffmpeg -i "$1" "$1".mp4; else echo "Usage: vid2mp4 <video>"; fi };_vid2mp4'   # Requires ffmpeg

alias remove_audio='function _remove_audio() { if [ "$#" -eq 1 ]; then ffmpeg -i "$1" -map 0:0 -acodec copy -vcodec copy "$1".mp4; else echo "Usage: remove_audio <mp4 file>"; fi };_remove_audio' # Requires Ffmpeg (https://unix.stackexchange.com/questions/6402/how-to-remove-an-audio-track-from-an-mp4-video-file)
# Audio/Video download.
# Requires: youtube-dl
# Note for Windows Subsystem for Linux: Don't install 'youtube-dl' with apt-get it doesn't work properly. Use following command sequence instead:
#       sudo curl -L https://yt-dl.org/latest/youtube-dl -o /usr/local/bin/youtube-dl
#       sudo chmod a+rx /usr/local/bin/youtube-dl
# Checkout: https://askubuntu.com/questions/486297/how-to-select-video-quality-from-youtube-dl
alias audio-dl='function _audio-dl { if [ "$#" -eq 1 ]; then youtube-dl -x --audio-format mp3 --output "%(title)s.%(ext)s" $1; else echo "Usage: audio-dl <video-url>"; fi };_audio-dl'
alias video-dl="function _video-dl { if [ "$#" -eq 1 ]; then youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4 $1; else echo 'Usage: video-dl <video-url>'; fi };_video-dl"

# Encryption/Decryption
alias aescrypt='function _aescrypt() { if [ "$#" -eq 1 ]; then openssl enc -e -aes-256-cbc -pbkdf2 -salt -in "$1" -out "$1".enc; else echo "Usage: aescrypt <file>"; fi };_aescrypt' # Requires OpenSSL
alias aesdecrypt='function _aesdecrypt() { if [ "$#" -eq 2 ] && [ "$1" != "$2" ]; then openssl enc -d -aes-256-cbc -pbkdf2 -salt -in "$1" -out "$2"; else echo "Usage: aesdecrypt <input_file> <output_file>"; fi };_aesdecrypt' # Requires OpenSSL
alias gpgcrypt='function _gpgcrypt() { if [ "$#" -eq 2 ]; then gpg -o "$1".gpg -e -r $2 "$1"; else echo "Usage: gpgcrypt <file> <key>"; fi };_gpgcrypt' # Requires GnuPG
alias gpgdecrypt='function _gpgdecrypt() { if [ "$#" -eq 2 ] && [ "$1" != "$2" ]; then gpg -o "$2" -d "$1"; else echo "Usage: gpgdecrypt <input_file> <output_file>"; fi };_gpgdecrypt' # Requires GnuPG

# Start applications without Network access
alias nn='nointernet.sh'
alias nnkp='nointernet.sh keepassxc'
alias nncode='nointernet.sh code'

# Ripgrep
alias rg='rg -i' # Set default mode to ignore case
alias rgf='function _rgf() { if [ "$#" -ge 2 ]; then rg -i "$1" "${@:2}"; else echo "Usage: rgf <regex> <file(s)>"; fi };_rgf' # Search in given file(s)
alias rgx='function _rgx() { if [ "$#" -eq 2 ]; then rg -i -t$1 "$2"; else echo "Usage: rgx <file_type> <regex>"; fi };_rgx' # Search in given file type
alias rgc='rg -s'  # Search case-sensitive
alias rgfc='function _rgfc() { if [ "$#" -ge 2 ]; then rg -s "$1" "${@:2}"; else echo "Usage: rgfc <regex> <file(s)>"; fi };_rgfc' # Search in given file(s) (case sensitive)
alias rgxc='function _rgxc() { if [ "$#" -eq 2 ]; then rg -s -t$1 "$2"; else echo "Usage: rgxc <file_type> <regex>"; fi };_rgxc' # Search in given file type (case sensitive)

# Rclone
alias rclsremotes='rclone listremotes'
alias rcls='rclone ls'
alias rclsd='rclone lsd'
alias rccp='rclone copy'
alias rcsy='rclone sync'
alias rctree='rclone tree'

# tmux
alias tms='tmux new -s'
alias tml='tmux ls'
alias tma='tmux attach -t'
alias tmk='tmux kill-session -t'

# vi
alias vii='vi -i NONE'

# Miscelleneous
alias delete_conflicted='find . -name "*conflicted*" -delete'
if [[ "$OSTYPE" == "linux"* ]] && [[ $(uname -a) =~ .*Microsoft.* ]]; then
    alias f='explorer.exe .'  # Opens current directory in Windows Explorer - WSL1
elif [[ "$OSTYPE" == "linux"* ]]; then
    alias diff='colordiff'     # Requires colordiff
    alias bcdiff='bcompare'    # Requires Beyond Compare
    alias top='htop'           # Requires htop
    alias f='nautilus ./'      # Opens current directory in file manager
    alias o='xdg-open'         # Open file with associated program
    alias refresh_menu='touch $HOME/.local/share/applications/a && rm $HOME/.local/share/applications/a'

    # Logs
    alias squidlog='tail -f /var/log/squid/access.log'
    alias apachelog='tail -f /var/log/apache2/access.log'

    # Refresh Media Server
    alias reload_media='sudo minidlnad -R && sudo service minidlna restart'

    # Distribution update and cleanup
    # Get rid of packages that are no longer required, cleanup APT cache, remove thumbnails
    alias purge_unused='sudo apt-get autoremove --purge && sudo apt-get clean'
    alias update_all='sudo apt-get update && sudo apt-get upgrade'
    alias upgrade_dist='sudo apt-get update && sudo apt-get dist-upgrade'
elif [[ "$OSTYPE" == "darwin"* ]]; then
    alias bcdiff='open -a "Beyond Compare"'  # Requires Beyond Compare
    alias f='open -a Finder ./'  # Opens current directory in MacOS Finder - Mac
    alias o='open'               # Open file with associated program
fi
